{"version":3,"names":["SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","useInternalTheme","checkScale","React","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","getSegmentedButtonColors","borderRadius","segmentBorderRadius","getSegmentedButtonBorderRadius","rippleColor","color","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","getSegmentedButtonDensityPadding","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme"],"sources":["SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useInternalTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {showCheckedIcon ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View testID={`${testID}-icon`} style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"],"mappings":";;;;;;AAAA;AACA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AAIiB;AAAA;AAAA;AAkDjB,MAAMA,mBAAmB,GAAG,QAYf;EAAA,IAZgB;IAC3BC,OAAO;IACPC,kBAAkB;IAClBC,QAAQ;IACRC,KAAK;IACLC,iBAAiB;IACjBC,IAAI;IACJC,MAAM;IACNC,KAAK;IACLC,OAAO;IACPC,OAAO;IACPC,OAAO,GAAG;EACL,CAAC;EACN,MAAMC,KAAK,GAAG,IAAAC,yBAAgB,GAAE;EAEhC,MAAMC,UAAU,GAAGC,KAAK,CAACC,MAAM,CAAC,IAAIC,qBAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAE9DJ,KAAK,CAACK,SAAS,CAAC,MAAM;IACpB,IAAI,CAACf,iBAAiB,EAAE;MACtB;IACF;IACA,IAAIJ,OAAO,EAAE;MACXgB,qBAAQ,CAACI,MAAM,CAACP,UAAU,EAAE;QAC1BQ,OAAO,EAAE,CAAC;QACVC,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MACLP,qBAAQ,CAACI,MAAM,CAACP,UAAU,EAAE;QAC1BQ,OAAO,EAAE,CAAC;QACVC,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ;EACF,CAAC,EAAE,CAACvB,OAAO,EAAEa,UAAU,EAAET,iBAAiB,CAAC,CAAC;EAE5C,MAAM;IAAEoB,SAAS;IAAEC;EAAK,CAAC,GAAGd,KAAK;EACjC,MAAM;IAAEe,WAAW;IAAEC,SAAS;IAAEC,WAAW;IAAEC;EAAgB,CAAC,GAC5D,IAAAC,+BAAwB,EAAC;IACvB9B,OAAO;IACPW,KAAK;IACLT;EACF,CAAC,CAAC;EAEJ,MAAM6B,YAAY,GAAG,CAACN,IAAI,GAAG,CAAC,GAAG,CAAC,IAAID,SAAS;EAC/C,MAAMQ,mBAAmB,GAAG,IAAAC,qCAA8B,EAAC;IACzDtB,KAAK;IACLF;EACF,CAAC,CAAC;EACF,MAAMyB,WAAW,GAAG,IAAAC,cAAK,EAACR,SAAS,CAAC,CAACS,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAE/D,MAAMC,QAAQ,GAAG,CAAClC,IAAI,GAAG,KAAK,GAAGE,KAAK,IAAIP,OAAO,GAAG,CAACI,iBAAiB,GAAG,IAAI;EAC7E,MAAMoC,eAAe,GAAGxC,OAAO,IAAII,iBAAiB;EAEpD,MAAMqC,QAAQ,GAAGhB,IAAI,GAAG,EAAE,GAAG,EAAE;EAC/B,MAAMiB,SAAS,GAAG;IAChBC,WAAW,EAAEpC,KAAK,GAAG,CAAC,GAAGiC,eAAe,GAAG,CAAC,GAAG,CAAC;IAChD,IAAIjC,KAAK,IAAI;MACXqC,SAAS,EAAE,CACT;QACEC,KAAK,EAAEhC,UAAU,CAACiC,WAAW,CAAC;UAC5BC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;UAClBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC;QACpB,CAAC;MACH,CAAC;IAEL,CAAC;EACH,CAAC;EAED,MAAMC,WAAsB,GAAG;IAC7BpB,eAAe;IACfH,WAAW;IACXE,WAAW;IACXG,YAAY;IACZ,GAAGC;EACL,CAAC;EACD,MAAMkB,eAAe,GAAG,IAAAC,uCAAgC,EAAC;IAAEzC;EAAQ,CAAC,CAAC;EACrE,MAAM0C,WAAsB,GAAG;IAC7BrB,YAAY;IACZ,GAAGC;EACL,CAAC;EACD,MAAMqB,cAAyB,GAAG;IAChC,IAAI,CAAC5B,IAAI,GACL;MACE6B,aAAa,EAAE,WAAW;MAC1BC,UAAU,EAAE;IACd,CAAC,GACD5C,KAAK,CAAC6C,KAAK,CAACC,UAAU,CAAC;IAC3BtB,KAAK,EAAER;EACT,CAAC;EAED,oBACE,oBAAC,iBAAI;IAAC,KAAK,EAAE,CAACsB,WAAW,EAAES,MAAM,CAACC,MAAM,EAAExD,KAAK;EAAE,gBAC/C,oBAAC,wBAAe;IACd,UAAU;IACV,OAAO,EAAEK,OAAQ;IACjB,kBAAkB,EAAEP,kBAAmB;IACvC,kBAAkB,EAAE;MAAEC,QAAQ;MAAEF;IAAQ,CAAE;IAC1C,iBAAiB,EAAC,QAAQ;IAC1B,QAAQ,EAAEE,QAAS;IACnB,WAAW,EAAEgC,WAAY;IACzB,MAAM,EAAE5B,MAAO;IACf,KAAK,EAAE8C;EAAY,gBAEnB,oBAAC,iBAAI;IAAC,KAAK,EAAE,CAACM,MAAM,CAACE,OAAO,EAAE;MAAEV;IAAgB,CAAC;EAAE,GAChDV,eAAe,gBACd,oBAAC,qBAAQ,CAAC,IAAI;IACZ,MAAM,EAAG,GAAElC,MAAO,aAAa;IAC/B,KAAK,EAAE,CAACoC,SAAS,EAAE;MAAEE,SAAS,EAAE,CAAC;QAAEC,KAAK,EAAEhC;MAAW,CAAC;IAAE,CAAC;EAAE,gBAE3D,oBAAC,aAAI;IAAC,MAAM,EAAE,OAAQ;IAAC,IAAI,EAAE4B;EAAS,EAAG,CAC3B,GACd,IAAI,EACPF,QAAQ,gBACP,oBAAC,qBAAQ,CAAC,IAAI;IAAC,MAAM,EAAG,GAAEjC,MAAO,OAAO;IAAC,KAAK,EAAEoC;EAAU,gBACxD,oBAAC,aAAI;IACH,MAAM,EAAErC,IAAK;IACb,IAAI,EAAEoC,QAAS;IACf,KAAK,EAAEvC,QAAQ,GAAGyB,SAAS,GAAGkC;EAAU,EACxC,CACY,GACd,IAAI,eACR,oBAAC,aAAI;IACH,OAAO,EAAC,YAAY;IACpB,KAAK,EAAE,CAACH,MAAM,CAACnD,KAAK,EAAE8C,cAAc,CAAE;IACtC,UAAU,EAAE,KAAM;IAClB,aAAa,EAAE;EAAE,GAEhB9C,KAAK,CACD,CACF,CACS,CACb;AAEX,CAAC;AAED,MAAMmD,MAAM,GAAGI,uBAAU,CAACC,MAAM,CAAC;EAC/BJ,MAAM,EAAE;IACNK,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE;EACf,CAAC;EACD3D,KAAK,EAAE;IACL4D,SAAS,EAAE;EACb,CAAC;EACDP,OAAO,EAAE;IACPQ,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBpB,eAAe,EAAE,CAAC;IAClBqB,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC;AAAC,eAEYxE,mBAAmB;AAAA;AAElC,MAAMyE,wBAAwB,GAAGzE,mBAAmB;AAAC"}